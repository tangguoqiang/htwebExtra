<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-3.1.xsd
  http://www.springframework.org/schema/tx
  http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
  http://cxf.apache.org/jaxws
  http://cxf.apache.org/schemas/jaxws.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.ht.extra.*" />
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
    <jaxws:endpoint id ="Hello" implementor="com.ht.extra.test.impl.HelloWorldImpl" address="/HelloWorld"/>
    <jaxws:endpoint id="PreTreatment" implementor="com.ht.extra.preTreatment.impl.PreTreatmentImpl" address="/PreTreatment"/>
    <jaxws:endpoint id="InTreatment" implementor="com.ht.extra.inTreatment.impl.InTreatmentImpl" address="/InTreatment"/>
    <jaxws:endpoint id="InInpTreatment" implementor="com.ht.extra.inInpTreatment.impl.InInpTreatmentImpl" address="/InInpTreatment"/>
    <jaxws:endpoint id="EndTreatment" implementor="com.ht.extra.endTreatment.impl.EndTreatmentImpl" address="/EndTreatment"/>
    <jaxws:endpoint id="ReSendData" implementor="com.ht.extra.reSendData.impl.ReSendDataImpl" address="/ReSendData"/>
    <jaxws:endpoint id="RegTreatment" implementor="com.ht.extra.regTreatment.impl.RegTreatmentImpl" address="/RegTreatment"/>
    <jaxws:endpoint id="ReconcileAccount" implementor="com.ht.extra.account.impl.ReconcileAccountImpl" address="/ReconcileAccount"/>

    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClass" value="${driver}" />-->
        <!--<property name="jdbcUrl" value="${url}" />-->
        <!--<property name="user" value="${username}" />-->
        <!--<property name="password" value="${password}" />-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialPoolSize" value="${initialSize}"></property>-->
        <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="${maxActive}"></property>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxIdleTime" value="${maxWait}"></property>-->
    <!--</bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="connectionProperties" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="0" />
        <property name="minIdle" value="${minIdle}" />
        <property name="maxActive" value="${maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat,log4j" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/ht/extra/mapping/*.xml"/>

    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ht.extra.dao" />

        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>